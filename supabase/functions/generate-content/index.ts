// supabase/functions/generate-content/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.2.1'

// Initialize OpenAI configuration
const configuration = new Configuration({
  apiKey: Deno.env.get('OPENAI_API_KEY'),
})
const openai = new OpenAIApi(configuration)

// CORS headers - explicitly allow your development URL
const corsHeaders = {
  'Access-Control-Allow-Origin': '*', // In production, change to your specific domain
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-client-info, apikey, X-User-Id',
  'Access-Control-Max-Age': '86400', // 24 hours cache for preflight requests
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 204, // No content needed for OPTIONS
      headers: corsHeaders,
    })
  }

  try {
    // Only allow POST requests
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method not allowed' }), {
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Parse request body
    const { prompt, title, existingContent, tone, contentLength, contentType } = await req.json()

    // Validate input
    if (!prompt) {
      return new Response(JSON.stringify({ error: 'Prompt is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Construct a comprehensive prompt for better results
    let fullPrompt = prompt

    // Add context if available
    if (title) {
      fullPrompt = `Title: "${title}"\n\n${fullPrompt}`
    }

    if (existingContent) {
      fullPrompt = `${fullPrompt}\n\nExisting content to consider or expand upon:\n${existingContent}`
    }

    // Add tone guidance
    if (tone) {
      fullPrompt = `${fullPrompt}\n\nUse a ${tone} tone.`
    }

    // Add length guidance
    if (contentLength) {
      const wordCount = contentLength === 'short' ? 150 : contentLength === 'medium' ? 300 : 500
      fullPrompt = `${fullPrompt}\n\nGenerate approximately ${wordCount} words.`
    }

    // Add format guidance
    if (contentType) {
      fullPrompt = `${fullPrompt}\n\nFormat this as a ${contentType}.`
    }

    // Add final instructions for formatting
    fullPrompt = `${fullPrompt}\n\nFormat the content with appropriate HTML elements (paragraphs, headings, etc.) that would work well in a blog post editor.`

    // For development/testing without actually calling OpenAI:
    // Uncomment this section to test without using OpenAI credits
    /*
    const mockContent = `<h2>Generated Content for: ${title || 'Untitled'}</h2>
    <p>This is a mock response for your prompt: "${prompt}"</p>
    <p>This would normally be generated by OpenAI with:</p>
    <ul>
      <li>Tone: ${tone || 'default'}</li>
      <li>Length: ${contentLength || 'default'}</li>
      <li>Type: ${contentType || 'default'}</li>
    </ul>`;
    
    return new Response(JSON.stringify({ content: mockContent }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    */

    // Call OpenAI API
    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo', // Or 'gpt-4' if you have access
      messages: [
        { role: 'system', content: 'You are a professional content writer specializing in blog posts and articles.' },
        { role: 'user', content: fullPrompt }
      ],
      max_tokens: contentLength === 'short' ? 250 : contentLength === 'medium' ? 500 : 800,
      temperature: tone === 'professional' ? 0.7 : tone === 'casual' ? 0.9 : 0.8,
    })

    // Extract the generated content
    const generatedContent = completion.data.choices[0].message?.content || ''

    // Return the generated content WITH CORS HEADERS
    return new Response(JSON.stringify({ content: generatedContent }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Error processing request:', error)
    
    // Return error response WITH CORS HEADERS
    return new Response(
      JSON.stringify({
        error: 'Error generating content',
        message: error.message,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})