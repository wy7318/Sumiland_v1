// supabase/functions/generate-excerpt/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.2.1'

// Initialize OpenAI configuration
const configuration = new Configuration({
  apiKey: Deno.env.get('OPENAI_API_KEY'),
})
const openai = new OpenAIApi(configuration)

// CORS headers - explicitly allow your development URL
const corsHeaders = {
  'Access-Control-Allow-Origin': '*', // In production, change to your specific domain
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-client-info, apikey, X-User-Id',
  'Access-Control-Max-Age': '86400', // 24 hours cache for preflight requests
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 204, // No content needed for OPTIONS
      headers: corsHeaders,
    })
  }

  try {
    // Only allow POST requests
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method not allowed' }), {
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Parse request body
    const { title, content } = await req.json()

    // Validate input - either title or content is required
    if (!title && !content) {
      return new Response(JSON.stringify({ error: 'Either title or content is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }

    // Create the prompt based on available input
    let prompt = ''
    if (title && content) {
      prompt = `Generate a compelling, SEO-friendly excerpt (max 150 words) for a blog post titled "${title}" with the following content:\n\n${content.substring(0, 1000)}...`
    } else if (title) {
      prompt = `Generate a compelling, SEO-friendly excerpt (max 150 words) for a blog post titled "${title}".`
    } else {
      prompt = `Generate a compelling, SEO-friendly excerpt (max 150 words) for the following blog post content:\n\n${content.substring(0, 1000)}...`
    }

    // For development/testing without actually calling OpenAI:
    // Uncomment this section to test without using OpenAI credits
    /*
    const mockExcerpt = `This is a mock excerpt for ${title || 'your blog post'}. In a real implementation, this would be generated by OpenAI based on your title and/or content to create an engaging and SEO-friendly summary that entices readers to click through to the full article.`;
    
    return new Response(JSON.stringify({ content: mockExcerpt }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    */

    // Call OpenAI API
    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo',
      messages: [
        { 
          role: 'system', 
          content: 'You are an expert copywriter who creates compelling, concise blog excerpts that drive reader engagement. Keep excerpts under 150 words.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 200,
      temperature: 0.7,
    })

    // Extract the generated excerpt
    const generatedExcerpt = completion.data.choices[0].message?.content?.trim() || ''

    // Return the generated excerpt WITH CORS HEADERS
    return new Response(JSON.stringify({ content: generatedExcerpt }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Error processing request:', error)
    
    // Return appropriate error response WITH CORS HEADERS
    return new Response(
      JSON.stringify({
        error: 'Failed to generate excerpt',
        message: error.message,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})