// 1. First, create this Edge Function in supabase/functions/create-admin-user/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
// Set up CORS headers to use for all responses
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': '*'
};
// Helper function to add CORS headers to all responses
const corsResponse = (body, status = 200)=>{
  return new Response(JSON.stringify(body), {
    status,
    headers: {
      'Content-Type': 'application/json',
      ...corsHeaders
    }
  });
};
// Create a Supabase client with the service role key (admin powers)
const supabaseAdmin = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});
serve(async (req)=>{
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }
  // Only allow POST requests
  if (req.method !== 'POST') {
    return corsResponse({
      error: 'Method not allowed'
    }, 405);
  }
  try {
    // Get request body
    const { email, name, phone, organizationId, organizationRole, createdBy } = await req.json();
    // Validate required fields
    if (!email || !name || !organizationId || !organizationRole) {
      return corsResponse({
        error: 'Missing required fields'
      }, 400);
    }
    // Generate a secure random password
    const randomPassword = Math.random().toString(36).slice(2, 10) + Math.random().toString(36).slice(2, 10).toUpperCase() + '!@#$';
    // 1. Create user in auth.users
    const { data: userData, error: userError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password: randomPassword,
      email_confirm: true,
      user_metadata: {
        name
      }
    });
    if (userError || !userData.user) {
      return corsResponse({
        error: userError?.message || 'Failed to create user'
      }, 500);
    }
    const userId = userData.user.id;
    // 2. Check if profile already exists first (it often does due to Supabase triggers)
    const { data: existingProfile } = await supabaseAdmin.from('profiles').select('id').eq('id', userId).single();
    let profileError;
    if (existingProfile) {
      // Profile exists, update it instead of inserting
      const { error } = await supabaseAdmin.from('profiles').update({
        name,
        phone,
        // Make sure these values match your DB constraints - using 'user' for system role
        role: 'user',
        type: 'user',
        is_super_admin: false,
        updated_at: new Date().toISOString()
      }).eq('id', userId);
      profileError = error;
    } else {
      // Profile doesn't exist, create it
      const { error } = await supabaseAdmin.from('profiles').insert({
        id: userId,
        name,
        phone,
        // Make sure these values match your DB constraints - using 'user' for system role
        role: 'user',
        type: 'user',
        is_super_admin: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
      profileError = error;
    }
    if (profileError) {
      console.error('Error with profile:', profileError);
      // Clean up auth user if profile operation fails
      await supabaseAdmin.auth.admin.deleteUser(userId);
      return corsResponse({
        error: profileError.message
      }, 500);
    }
    // 3. Add user to organization
    const { error: orgError } = await supabaseAdmin.from('user_organizations').insert({
      user_id: userId,
      organization_id: organizationId,
      role: organizationRole,
      created_by: createdBy,
      updated_by: createdBy,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    if (orgError) {
      console.error('Error adding user to organization:', orgError);
      // Clean up on error
      await supabaseAdmin.auth.admin.deleteUser(userId);
      return corsResponse({
        error: orgError.message
      }, 500);
    }
    // 4. Send password reset email
    await supabaseAdmin.auth.resetPasswordForEmail(email, {
      redirectTo: Deno.env.get('PASSWORD_RESET_URL') || 'http://localhost:5173/reset-password'
    });
    // Return success
    return corsResponse({
      userId,
      message: 'User created successfully'
    }, 201);
  } catch (error) {
    console.error('Error in create-admin-user function:', error);
    return corsResponse({
      error: error.message
    }, 500);
  }
});
